// Generated by CoffeeScript 1.8.0
(function() {
  var Webserver, express, path;

  express = require('express');

  path = require('path');

  Webserver = (function() {
    function Webserver(config, db) {
      this.config = config;
      this.db = db;
      this.app = express();
      this.app.set('trust proxy', this.config.trustProxy);
      this.app.use(require('body-parser').urlencoded({
        limit: this.config.uploadSizeLimit,
        extended: false
      }));
      this.app.get('/', function(req, res) {
        return res.sendFile(path.resolve(__dirname, '..', 'public', 'index.html'));
      });
      this.app.post('/paste', (function(_this) {
        return function(req, res) {
          var content;
          content = req.body.content;
          if (!content) {
            return res.status(400).send('No paste content submitted');
          }
          return _this.db.addPaste(content, req.ip).then(function(paste) {
            return res.redirect(paste.get('paste_id'));
          })["catch"](function(err) {
            return res.status(500).send(err.message);
          });
        };
      })(this));
      this.app.get('/:id', (function(_this) {
        return function(req, res) {
          var id;
          id = req.params.id.replace(/[^\w+_]/g, '');
          return new _this.db.Paste({
            paste_id: id
          }).fetch({
            require: true
          }).then(function(paste) {
            return res.type('text').send(paste.get('content'));
          })["catch"](_this.db.Paste.NotFoundError, function(err) {
            return res.status(404).send("No paste for id " + id);
          })["catch"](function(err) {
            return res.status(500).send(err.message);
          });
        };
      })(this));
      this.config.listen.forEach((function(_this) {
        return function(pair) {
          var host, port, server;
          host = pair[0], port = pair[1];
          server = _this.app.listen(port, host);
          server.on('error', function(err) {
            return console.error("Failed to bind " + host + ":" + port + ": " + err);
          });
          return server.on('listening', function() {
            return console.log("Listening on " + host + ":" + port);
          });
        };
      })(this));
    }

    return Webserver;

  })();

  module.exports = Webserver;

}).call(this);
