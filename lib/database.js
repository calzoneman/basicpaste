// Generated by CoffeeScript 1.8.0
(function() {
  var Database, EventEmitter, bookshelf, crypto, knex,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bookshelf = require('bookshelf');

  knex = require('knex');

  crypto = require('crypto');

  EventEmitter = require('events').EventEmitter;

  Database = (function(_super) {
    __extends(Database, _super);

    function Database(config) {
      this.config = config;
      this.knex = knex(this.config);
      this.bookshelf = bookshelf(this.knex);
      this.ready = false;
      this.knex.schema.hasTable('pastes').then((function(_this) {
        return function(exists) {
          if (!exists) {
            console.log('Creating table pastes');
            return _this.knex.schema.createTable('pastes', function(t) {
              t.increments('id').primary();
              t.string('paste_id', 16).unique();
              t.string('uploader_ip', 39).index();
              t.text('content');
              return t.timestamps();
            });
          } else {
            return true;
          }
        };
      })(this)).then((function(_this) {
        return function() {
          _this.ready = true;
          return _this.emit('ready');
        };
      })(this))["catch"](function(err) {
        return console.error('Database initialization failed: %s', err);
      });
      this.Paste = this.bookshelf.Model.extend({
        tableName: 'pastes',
        hasTimestamps: true
      });
    }

    Database.prototype.addPaste = function(content, ip) {
      var idLength, pasteId;
      idLength = this.config.pasteIdLength;
      pasteId = crypto.pseudoRandomBytes(idLength).toString('base64');
      pasteId = pasteId.substring(0, idLength).replace(/\//g, '_');
      return new this.Paste({
        paste_id: pasteId,
        content: content,
        uploader_ip: ip
      }).save().tap(function(paste) {
        return console.log('Added paste: id=%d uploader_ip=%s paste_id=%s', paste.get('id'), paste.get('uploader_ip'), pasteId);
      })["catch"](function(err) {
        console.error('Error adding paste: %s', err);
        throw err;
      });
    };

    return Database;

  })(EventEmitter);

  module.exports = Database;

}).call(this);
